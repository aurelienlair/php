#Single responsibility
a class should have only a single responsibility (i.e. changes to only one part of the software's specification should be able to affect the specification of the class)
#Open close principle
software entities … should be open for extension, but closed for modification
#Liskov
Objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program
#Interface segregation
many client-specific interfaces are better than one general-purpose interface
#Dependency inversion
one should “depend upon abstractions, [not] concretions
#Decorator
Dynamically adds responsibility to the interface by wrapping the original code
#Adapter
Converts one interface to another so that it matches what the client is expecting
